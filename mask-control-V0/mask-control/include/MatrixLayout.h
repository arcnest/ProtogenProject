#ifndef MATRIXLAYOUT_H
#define MATRIXLAYOUT_H

#define START_EYE_LEFT 0
#define START_EYE_RIGHT 6
#define START_MOUTH_LEFT 2
#define START_MOUTH_RIGHT 8
#define SEGMENTS_END_POS 7

bool emptySegment[8][8] = {

    // Segment 0
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},

};

bool eyes[3][2][8][8] = {

    // Eye Type 0 open
    {
        // Segment 0
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {1, 1, 0, 0, 0, 0, 0, 0},
            {1, 1, 1, 1, 0, 0, 0, 0},
            {1, 1, 1, 1, 1, 0, 0, 0},
            {0, 0, 0, 1, 1, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 1
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 1, 1},
            {0, 0, 0, 0, 1, 1, 1, 1},
            {0, 0, 0, 1, 1, 1, 1, 1},
            {0, 0, 1, 1, 1, 1, 0, 0},
            {0, 0, 1, 1, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        }},

    // Eye Type 1 closed
    {
        // Segment 0
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {1, 1, 1, 1, 0, 0, 0, 0},
            {0, 0, 0, 1, 1, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 1
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 1, 1, 1},
            {0, 0, 0, 1, 1, 1, 0, 0},
            {0, 0, 1, 1, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        }},
    // Eye Type 2 Heart Eyes
    {
        // Segment 0
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 1, 1, 0, 0, 0, 0},
            {0, 1, 1, 1, 1, 0, 0, 0},
            {1, 1, 1, 1, 1, 0, 0, 0},
            {1, 1, 1, 1, 0, 0, 0, 0},
            {1, 1, 1, 0, 0, 0, 0, 0},
            {1, 1, 0, 0, 0, 0, 0, 0},
            {1, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 1
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 1, 1, 0, 0},
            {0, 0, 0, 1, 1, 1, 1, 0},
            {0, 0, 0, 1, 1, 1, 1, 1},
            {0, 0, 0, 0, 1, 1, 1, 1},
            {0, 0, 0, 0, 0, 1, 1, 1},
            {0, 0, 0, 0, 0, 0, 1, 1},
            {0, 0, 0, 0, 0, 0, 0, 1},
        }}};

bool mouth[3][4][8][8] = {
    // Mouth Type 0 closed
    {
        // Segment 0
        {
            {0, 0, 0, 0, 0, 1, 1, 1},
            {0, 0, 0, 0, 0, 1, 1, 1},
            {0, 0, 0, 1, 1, 1, 1, 1},
            {0, 1, 1, 1, 1, 1, 0, 0},
            {1, 1, 1, 1, 1, 0, 0, 0},
            {1, 1, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 1
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 1, 0, 0, 0},
            {0, 0, 0, 1, 1, 1, 0, 0},
            {0, 0, 1, 1, 0, 1, 1, 1},
            {1, 1, 1, 0, 0, 0, 1, 1},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 2
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 1, 1, 1, 0, 0},
            {1, 1, 1, 0, 0, 0, 1, 1},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 3
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 1, 1, 1},
            {0, 0, 0, 1, 1, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        }},

    // Mouth Type 1 Open
    {

        // Segment 0
        {
            {0, 0, 0, 0, 1, 1, 1, 1},
            {0, 0, 0, 1, 1, 1, 1, 1},
            {0, 1, 1, 1, 1, 1, 1, 1},
            {1, 1, 1, 1, 1, 1, 0, 0},
            {1, 1, 1, 1, 1, 0, 0, 0},
            {1, 1, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 1
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 1, 0, 0, 0},
            {0, 0, 0, 1, 1, 1, 0, 0},
            {0, 0, 1, 1, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 1},
            {1, 1, 1, 0, 0, 0, 1, 1},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 2
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 1, 1, 1, 0, 0},
            {1, 1, 1, 1, 1, 1, 1, 1},
            {1, 1, 1, 0, 0, 0, 1, 1},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 3
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 1, 1, 1},
            {0, 0, 0, 1, 1, 1, 1, 1},
            {0, 0, 0, 1, 1, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        }},

    // Mouth Type 2 Wide Open
    {

        // Segment 0
        {
            {0, 0, 0, 0, 1, 1, 1, 1},
            {0, 0, 0, 1, 1, 1, 1, 1},
            {0, 1, 1, 1, 1, 1, 1, 1},
            {1, 1, 1, 1, 1, 1, 1, 1},
            {1, 1, 1, 1, 1, 1, 0, 0},
            {1, 1, 1, 1, 1, 0, 0, 0},
            {1, 1, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 1
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 1, 0, 0, 0},
            {0, 0, 0, 1, 1, 1, 0, 0},
            {0, 0, 1, 1, 1, 1, 1, 1},
            {1, 1, 1, 1, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 1},
            {1, 1, 1, 0, 0, 0, 1, 1},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 2
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 1, 1, 1, 0, 0},
            {1, 1, 1, 1, 1, 1, 1, 1},
            {1, 1, 1, 1, 1, 1, 1, 1},
            {1, 1, 1, 0, 0, 0, 1, 1},
            {0, 0, 0, 0, 0, 0, 0, 0},
        },
        // Segment 3
        {
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 1, 1, 1},
            {0, 1, 1, 1, 1, 1, 1, 1},
            {0, 1, 1, 1, 1, 1, 1, 1},
            {0, 1, 1, 1, 1, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
        }}};

// bool eyesDefault[2][8][8] = {

//     // Segment 0
//     {
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {1, 1, 1, 0, 0, 0, 0, 0},
//         {1, 1, 1, 1, 1, 0, 0, 0},
//         {0, 0, 0, 1, 1, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//     },
//     // Segment 1
//     {
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 1, 1, 1},
//         {0, 0, 0, 1, 1, 1, 1, 1},
//         {0, 0, 0, 1, 1, 1, 0, 0},
//         {0, 0, 1, 1, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//     }};

// bool mouthOpen[4][8][8] = {

//     // Segment 0
//     {
//         {0, 0, 0, 0, 1, 1, 1, 1},
//         {0, 0, 0, 1, 1, 1, 1, 1},
//         {0, 1, 1, 1, 1, 1, 1, 1},
//         {1, 1, 1, 1, 1, 1, 0, 0},
//         {1, 1, 1, 1, 1, 0, 0, 0},
//         {1, 1, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//     },
//     // Segment 1
//     {
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 1, 0, 0, 0},
//         {0, 0, 0, 1, 1, 1, 0, 0},
//         {0, 0, 1, 1, 1, 1, 1, 1},
//         {1, 1, 1, 1, 0, 1, 1, 1},
//         {1, 1, 1, 0, 0, 0, 1, 1},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//     },
//     // Segment 2
//     {
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 1, 1, 1, 0, 0},
//         {1, 1, 1, 1, 1, 1, 1, 1},
//         {1, 1, 1, 0, 0, 0, 1, 1},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//     },
//     // Segment 3
//     {
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 1, 1, 1},
//         {0, 0, 0, 1, 1, 1, 1, 1},
//         {0, 0, 0, 1, 1, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//     }};

// bool mouthOpenWide[4][8][8] = {

//     // Segment 0
//     {
//         {0, 0, 0, 0, 1, 1, 1, 1},
//         {0, 0, 0, 1, 1, 1, 1, 1},
//         {0, 1, 1, 1, 1, 1, 1, 1},
//         {1, 1, 1, 1, 1, 1, 1, 1},
//         {1, 1, 1, 1, 1, 1, 0, 0},
//         {1, 1, 1, 1, 1, 0, 0, 0},
//         {1, 1, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//     },
//     // Segment 1
//     {
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 1, 0, 0, 0},
//         {0, 0, 0, 1, 1, 1, 0, 0},
//         {0, 0, 1, 1, 1, 1, 1, 1},
//         {1, 1, 1, 1, 1, 1, 1, 1},
//         {1, 1, 1, 1, 0, 1, 1, 1},
//         {1, 1, 1, 0, 0, 0, 1, 1},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//     },
//     // Segment 2
//     {
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 1, 1, 1, 0, 0},
//         {1, 1, 1, 1, 1, 1, 1, 1},
//         {1, 1, 1, 1, 1, 1, 1, 1},
//         {1, 1, 1, 0, 0, 0, 1, 1},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//     },
//     // Segment 3
//     {
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//         {0, 0, 0, 0, 0, 1, 1, 1},
//         {0, 1, 1, 1, 1, 1, 1, 1},
//         {0, 1, 1, 1, 1, 1, 1, 1},
//         {0, 1, 1, 1, 1, 0, 0, 0},
//         {0, 0, 0, 0, 0, 0, 0, 0},
//     }};

class MatrixLayout
{
private:
    /* data */
public:
    MatrixLayout(/* args */);
    ~MatrixLayout();
    bool layoutMatrix[12][8][8];
    void init();
    void mouthType(int type);
    void eyesType(int type);
};

MatrixLayout::MatrixLayout(/* args */)
{
}

MatrixLayout::~MatrixLayout()
{
}

void MatrixLayout::init()
{
    eyesType(0);
    mouthType(0);
}

void MatrixLayout::eyesType(int type)
{
    int segmentPos = 0;

    segmentPos = START_EYE_LEFT;
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            for (int k = 0; k < 8; k++)
            {
                layoutMatrix[segmentPos + i][j][k] = eyes[type][i][j][k];
            }
        }
    }
    segmentPos = START_EYE_RIGHT;
    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            for (int k = 0; k < 8; k++)
            {
                layoutMatrix[segmentPos + i][SEGMENTS_END_POS - j][k] = eyes[type][i][j][k];
            }
        }
    }

    // switch (type)
    // {
    // case 0:
    //     segmentPos = START_EYE_LEFT;
    //     for (int i = 0; i < 2; i++)
    //     {
    //         for (int j = 0; j < 8; j++)
    //         {
    //             for (int k = 0; k < 8; k++)
    //             {
    //                 layoutMatrix[segmentPos + i][j][k] = eyesDefault[i][j][k];
    //             }
    //         }
    //     }
    //     segmentPos = START_EYE_RIGHT;
    //     for (int i = 0; i < 2; i++)
    //     {
    //         for (int j = 0; j < 8; j++)
    //         {
    //             for (int k = 0; k < 8; k++)
    //             {
    //                 layoutMatrix[segmentPos + i][SEGMENTS_END_POS - j][k] = eyesDefault[i][j][k];
    //             }
    //         }
    //     }
    //     break;
    //     // TODO add more eye types
    // default:
    //     // TODO error handling
    //     break;
    // }
}

void MatrixLayout::mouthType(int type)
{
    int segmentPos = 0;

    segmentPos = START_MOUTH_LEFT;
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            for (int k = 0; k < 8; k++)
            {
                layoutMatrix[segmentPos + i][j][k] = mouth[type][i][j][k];
            }
        }
    }
    segmentPos = START_MOUTH_RIGHT;
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            for (int k = 0; k < 8; k++)
            {
                layoutMatrix[segmentPos + i][SEGMENTS_END_POS - j][k] = mouth[type][i][j][k];
            }
        }
    }

    // switch (type)
    // {
    // case 0:
    //     segmentPos = START_MOUTH_LEFT;
    //     for (int i = 0; i < 4; i++)
    //     {
    //         for (int j = 0; j < 8; j++)
    //         {
    //             for (int k = 0; k < 8; k++)
    //             {
    //                 layoutMatrix[segmentPos + i][j][k] = mouth[i][j][k];
    //             }
    //         }
    //     }
    //     segmentPos = START_MOUTH_RIGHT;
    //     for (int i = 0; i < 4; i++)
    //     {
    //         for (int j = 0; j < 8; j++)
    //         {
    //             for (int k = 0; k < 8; k++)
    //             {
    //                 layoutMatrix[segmentPos + i][SEGMENTS_END_POS - j][k] = mouth[i][j][k];
    //             }
    //         }
    //     }
    //     break;
    // case 1:
    //     segmentPos = START_MOUTH_LEFT;
    //     for (int i = 0; i < 4; i++)
    //     {
    //         for (int j = 0; j < 8; j++)
    //         {
    //             for (int k = 0; k < 8; k++)
    //             {
    //                 layoutMatrix[segmentPos + i][j][k] = mouthOpen[i][j][k];
    //             }
    //         }
    //     }
    //     segmentPos = START_MOUTH_RIGHT;
    //     for (int i = 0; i < 4; i++)
    //     {
    //         for (int j = 0; j < 8; j++)
    //         {
    //             for (int k = 0; k < 8; k++)
    //             {
    //                 layoutMatrix[segmentPos + i][SEGMENTS_END_POS - j][k] = mouthOpen[i][j][k];
    //             }
    //         }
    //     }
    //     break;
    // case 2:
    //     segmentPos = START_MOUTH_LEFT;
    //     for (int i = 0; i < 4; i++)
    //     {
    //         for (int j = 0; j < 8; j++)
    //         {
    //             for (int k = 0; k < 8; k++)
    //             {
    //                 layoutMatrix[segmentPos + i][j][k] = mouthOpenWide[i][j][k];
    //             }
    //         }
    //     }
    //     segmentPos = START_MOUTH_RIGHT;
    //     for (int i = 0; i < 4; i++)
    //     {
    //         for (int j = 0; j < 8; j++)
    //         {
    //             for (int k = 0; k < 8; k++)
    //             {
    //                 layoutMatrix[segmentPos + i][SEGMENTS_END_POS - j][k] = mouthOpenWide[i][j][k];
    //             }
    //         }
    //     }
    //     break;
    //     // TODO add more mouth types
    // default:
    //     // TODO error handling
    //     break;
    // }
}

#endif // MATRIXLAYOUT_H